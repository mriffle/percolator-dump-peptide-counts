package org.yeastrc.proteomics.perc_pep_dump.program;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.math.BigDecimal;

import org.yeastrc.proteomics.perc_pep_dump.constants.Constants;
import org.yeastrc.proteomics.perc_pep_dump.objects.PercolatorPSM;
import org.yeastrc.proteomics.perc_pep_dump.objects.PercolatorPeptideResult;
import org.yeastrc.proteomics.perc_pep_dump.objects.PercolatorResults;
import org.yeastrc.proteomics.perc_pep_dump.reader.PercolatorResultsReader;
import picocli.CommandLine;

/**
 * A program to generate tab-delimited output from Percolator's
 * XML output. Currently only outputs PSMs.
 *
 */

@CommandLine.Command(name = "java -jar " + Constants.PROGRAM_NAME,
		mixinStandardHelpOptions = true,
		version = Constants.PROGRAM_NAME + " " + Constants.PROGRAM_VERSION,
		sortOptions = false,
		synopsisHeading = "%n",
		descriptionHeading = "%n@|bold,underline Description:|@%n%n",
		optionListHeading = "%n@|bold,underline Options:|@%n",
		description = "Dump all percolator peptides and PSM counts given the supplied q-value cutoffs.\n\n" +
				"More info at: " + Constants.PROGRAM_URI
)
public class MainProgram implements Runnable {

	@CommandLine.Option(names = { "-p", "--peptide-cutoff" }, required = true, description = "Q-value cutoff for peptides.")
	private BigDecimal peptideQValueCutoff;

	@CommandLine.Option(names = { "-s", "--psm-cutoff" }, required = true, description = "Q-value cutoff for PSMs.")
	private BigDecimal psmQValueCutoff;

	@CommandLine.Option(names = { "-x", "--percolator-xml" }, required = false, description = "Full path to the XML file generated by Percolator.")
	private File percolatorFile;

	public void run() {

		printRuntimeInfo();

		if( !percolatorFile.exists() ) {
			System.err.println( "Could not find percolator XML file: " + percolatorFile.getAbsolutePath() );
			System.exit( 1 );
		}

		try {
			PercolatorResults percolatorResults = PercolatorResultsReader.getPercolatorResults(percolatorFile);

			for(PercolatorPeptideResult percolatorPeptideResult : percolatorResults.getPeptideResults().values()) {
				if(percolatorPeptideResult.getPercolatorPeptideStats().getqValue() <= peptideQValueCutoff.doubleValue()) {
					int count = 0;
					for(PercolatorPSM percolatorPSM : percolatorPeptideResult.getPsmCollection()) {
						if(percolatorPSM.getqValue() <= psmQValueCutoff.doubleValue()) {
							count++;
						}
					}

					System.out.println(percolatorPeptideResult.getReportedPeptide() + "\t" + count);
				}
			}

		} catch(Throwable t) {
			t.printStackTrace();
		}
	}

	public static void main( String[] args ) {

		MainProgram mp = new MainProgram();
		mp.args = args;

		CommandLine.run(mp, args);
	}

	public void printRuntimeInfo() {

		try( BufferedReader br = new BufferedReader( new InputStreamReader( MainProgram.class.getResourceAsStream( "run.txt" ) ) ) ) {

			String line = null;
			while ( ( line = br.readLine() ) != null ) {

				line = line.replace( "{{URL}}", Constants.PROGRAM_URI);
				line = line.replace( "{{VERSION}}", Constants.PROGRAM_VERSION );

				System.err.println( line );

			}

			System.err.println( "" );

		} catch ( Exception e ) {
			System.err.println( "Error printing runtime information." );
		}
	}

	private String[] args;
}
